// Code generated by MockGen. DO NOT EDIT.
// Source: store.go
//
// Generated by this command:
//
//	mockgen -source store.go -destination=zz_useractivity_fakes.go -package=useractivity
//

// Package useractivity is a generated GoMock package.
package useractivity

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockuserHandler is a mock of userHandler interface.
type MockuserHandler struct {
	ctrl     *gomock.Controller
	recorder *MockuserHandlerMockRecorder
}

// MockuserHandlerMockRecorder is the mock recorder for MockuserHandler.
type MockuserHandlerMockRecorder struct {
	mock *MockuserHandler
}

// NewMockuserHandler creates a new mock instance.
func NewMockuserHandler(ctrl *gomock.Controller) *MockuserHandler {
	mock := &MockuserHandler{ctrl: ctrl}
	mock.recorder = &MockuserHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserHandler) EXPECT() *MockuserHandlerMockRecorder {
	return m.recorder
}

// UserName mocks base method.
func (m *MockuserHandler) UserName(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserName", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserName indicates an expected call of UserName.
func (mr *MockuserHandlerMockRecorder) UserName(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserName", reflect.TypeOf((*MockuserHandler)(nil).UserName), ctx)
}
